binary_sensor:
  - platform: status
    id: keypad_status
    name: Keypad Status

text_sensor:
  - platform: template
    name: "Keypad - Received Pin"
    id: keypadpin
    icon: mdi:lastpass
  - platform: template
    name: Last User
    id: last_user
    icon: mdi:account

sensor:
  - platform: template
    name: Keypad - Last Code
    id: keyCode 
    icon: mdi:lastpass   
    on_value:
      - if:
          condition:
            - lambda: 'return id(keyCode).state == 11305112;' 
          then:  
            - switch.toggle: output_6
            - text_sensor.template.publish:
                id: last_user
                state: "User 1 Tag"
            - rtttl.play: "beep:d=16,o=5,b=100:b"
      - if:
          condition:
            - lambda: 'return id(keyCode).state == 9832658;' 
          then:  
            - switch.toggle: output_6
            - text_sensor.template.publish:
                id: last_user
                state: "User 2 Tag"
            - rtttl.play: "beep:d=16,o=5,b=100:b"
      - if:
          condition:
            - lambda: 'return id(keyCode).state == 123456;' 
          then:  
            - switch.toggle: output_6
            - text_sensor.template.publish:
                id: last_user
                state: "User 1 Code"
            - rtttl.play: "beep:d=16,o=5,b=100:b"
      - if:
          condition:
            - lambda: 'return id(keyCode).state != 11305112;' 
            - lambda: 'return id(keyCode).state != 9832658;'
            - lambda: 'return id(keyCode).state != 123456;'
          then:
            - text_sensor.template.publish:
                id: last_user
                state: "Unknown user"
            - rtttl.play: "beep:d=8,o=5,b=100:b"
  - platform: template
    name: "Keypad - Last Keypress"
    id: last_keypress
    icon: mdi:lastpass
    on_value:
      - if:
          condition:
           - lambda: 'return id(last_keypress).state == 11;' 
          then:  
            - homeassistant.service:
                service: button.press
                data: 
                  entity_id: button.all_knx_switches

# Define Piezo Buzzer as Output for RTTTL
rtttl:
  output: buzzer_output

wiegand:
  - id: mykeypad
    d0: GPIO18 # Green Wire
    d1: GPIO13 # White Wire
    on_key:
      - lambda: ESP_LOGI("KEY", "received key %d", x);
      - sensor.template.publish:
          id: last_keypress
          state: !lambda 'return x;'
    on_tag:
      - lambda: ESP_LOGI("TAG", "received tag %s", x.c_str());
      - homeassistant.tag_scanned: !lambda 'return x.c_str();'
      - sensor.template.publish:
         id: keyCode
         state: !lambda "return parse_number<int>(x).value();"  

    on_raw:
      - lambda: ESP_LOGI("RAW", "received raw %d bits, value %llx", bits, value);

key_collector:
  - id: pincode_reader
    source_id: mykeypad
    min_length: 6
    max_length: 6
    end_keys: "*"
    end_key_required: false
    back_keys: "B"
    clear_keys: "C"
    allowed_keys: "0123456789"
    timeout: 3s
    on_progress:
      - logger.log:
          format: "input progress: '%s', started by '%c'"
          args: [ 'x.c_str()', "(start == 0 ? '~' : start)" ]
    on_result:
      - logger.log:
          format: "input result: '%s', started by '%c', ended by '%c'"
          args: [ 'x.c_str()', "(start == 0 ? '~' : start)", "(end == 0 ? '~' : end)" ]
      - text_sensor.template.publish:
          id: keypadpin
          state: !lambda 'return x.c_str();'
      - sensor.template.publish:
          id: keyCode
          state: !lambda "return parse_number<int>(x).value();"  
      - delay: 3s
      - text_sensor.template.publish:
          id: keypadpin
          state: '000000'
    on_timeout:
      - logger.log:
          format: "input timeout: '%s', started by '%c'"
          args: [ 'x.c_str()', "(start == 0 ? '~' : start)" ]
